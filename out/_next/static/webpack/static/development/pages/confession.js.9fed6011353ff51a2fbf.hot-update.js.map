{"version":3,"file":"static/webpack/static/development/pages/confession.js.9fed6011353ff51a2fbf.hot-update.js","sources":["webpack:///./components/Popover/index.js"],"sourcesContent":["import * as cssVendor from \"css-vendor\";\nimport Debug from \"debug\";\nimport { throttle } from \"lodash\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Layout from \"./layout\";\nimport resizeEvent from \"./on-resize\";\nimport Platform from \"./platform\";\nimport Tip from \"./tip\";\nimport Utils from \"./utils\";\n\nconst log = Debug(\"react-popover\");\n\nconst supportedCSSValue = Utils.clientOnly(cssVendor.supportedValue);\n\nconst jsprefix = x => `${cssVendor.prefix.js}${x}`;\n\nconst cssprefix = x => `${cssVendor.prefix.css}${x}`;\n\nconst cssvalue = (prop, value) =>\n  supportedCSSValue(prop, value) || cssprefix(value);\n\nconst coreStyle = {\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  display: cssvalue(\"display\", \"flex\")\n};\n\nconst faces = {\n  above: \"down\",\n  right: \"left\",\n  below: \"up\",\n  left: \"right\"\n};\n\n/* Flow mappings. Each map maps the flow domain to another domain. */\n\nconst flowToTipTranslations = {\n  row: \"translateY\",\n  column: \"translateX\"\n};\n\nconst flowToPopoverTranslations = {\n  row: \"translateX\",\n  column: \"translateY\"\n};\n\nclass Popover extends React.Component {\n  // static propTypes = {\n  //   body: T.node.isRequired,\n  //   children: T.element.isRequired,\n  //   appendTarget: T.object,\n  //   className: T.string,\n  //   enterExitTransitionDurationMs: T.number,\n  //   isOpen: T.bool,\n  //   offset: T.number,\n  //   place: T.oneOf(Layout.validTypeValues),\n  //   preferPlace: T.oneOf(Layout.validTypeValues),\n  //   refreshIntervalMs: T.oneOfType([T.number, T.bool]),\n  //   style: T.object,\n  //   tipSize: T.number,\n  //   onOuterAction: T.func\n  // };\n  static defaultProps = {\n    tipSize: 7,\n    preferPlace: null,\n    place: null,\n    offset: 4,\n    isOpen: false,\n    onOuterAction: Utils.noop,\n    enterExitTransitionDurationMs: 500,\n    children: null,\n    refreshIntervalMs: 200,\n    appendTarget: Platform.isClient ? Platform.document.body : null\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      standing: \"above\",\n      exited: !this.props.isOpen, // for animation-dependent rendering, should popover close/open?\n      exiting: false, // for tracking in-progress animations\n      toggle: this.props.isOpen || false // for business logic tracking, should popover close/open?\n    };\n  }\n  componentDidMount() {\n    /* Our component needs a DOM Node reference to the child so that it can be\n    measured so that we can correctly layout the popover. We do not have any\n    control over the child so cannot leverage refs. We could wrap our own\n    primitive component around the child but that could lead to breaking the\n    uses layout (e.g. the child is a flex item). Leveraging findDOMNode seems\n    to be the only functional solution, despite all the general warnings not to\n    use it. We have a legitimate use-case. */\n    // eslint-disable-next-line\n    this.targetEl = ReactDOM.findDOMNode(this);\n    if (this.props.isOpen) this.enter();\n  }\n  UNSAFE_componentWillReceiveProps(propsNext) {\n    //log(`Component received props!`, propsNext)\n    const willOpen = !this.props.isOpen && propsNext.isOpen;\n    const willClose = this.props.isOpen && !propsNext.isOpen;\n\n    if (willOpen) this.open();\n    else if (willClose) this.close();\n  }\n  componentDidUpdate(propsPrev, statePrev) {\n    //log(`Component did update!`)\n    const didOpen = !statePrev.toggle && this.state.toggle;\n    const didClose = statePrev.toggle && !this.state.toggle;\n\n    if (didOpen) this.enter();\n    else if (didClose) this.exit();\n  }\n  componentWillUnmount() {\n    /* If the Popover is unmounted while animating,\n    clear the animation so no setState occured */\n    this.animateExitStop();\n    /* If the Popover was never opened then then tracking\n    initialization never took place and so calling untrack\n    would be an error. Also see issue 55. */\n    if (this.hasTracked) this.untrackPopover();\n  }\n  resolvePopoverLayout() {\n    /* Find the optimal zone to position self. Measure the size of each zone and use the one with\n    the greatest area. */\n\n    const pickerSettings = {\n      preferPlace: this.props.preferPlace,\n      place: this.props.place\n    };\n\n    /* This is a kludge that solves a general problem very specifically for Popover.\n    The problem is subtle. When Popover positioning changes such that it resolves at\n    a different orientation, its Size will change because the Tip will toggle between\n    extending Height or Width. The general problem of course is that calculating\n    zone positioning based on current size is non-trivial if the Size can change once\n    resolved to a different zone. Infinite recursion can be triggered as we noted here:\n    https://github.com/littlebits/react-popover/issues/18. As an example of how this\n    could happen in another way: Imagine the user changes the CSS styling of the popover\n    based on whether it was `row` or `column` flow. TODO: Find a solution to generally\n    solve this problem so that the user is free to change the Popover styles in any\n    way at any time for any arbitrary trigger. There may be value in investigating the\n    http://overconstrained.io community for its general layout system via the\n    constraint-solver Cassowary. */\n    if (this.zone)\n      this.size[this.zone.flow === \"row\" ? \"h\" : \"w\"] += this.props.tipSize;\n    const zone = Layout.pickZone(\n      pickerSettings,\n      this.frameBounds,\n      this.targetBounds,\n      this.size\n    );\n    if (this.zone)\n      this.size[this.zone.flow === \"row\" ? \"h\" : \"w\"] -= this.props.tipSize;\n\n    const tb = this.targetBounds;\n    this.zone = zone;\n    log(\"zone\", zone);\n\n    this.setState({\n      standing: zone.standing\n    });\n\n    const axis = Layout.axes[zone.flow];\n    log(\"axes\", axis);\n\n    const dockingEdgeBufferLength =\n      Math.round(getComputedStyle(this.bodyEl).borderRadius.slice(0, -2)) || 0;\n    const scrollSize = Layout.El.calcScrollSize(this.frameEl);\n    scrollSize.main = scrollSize[axis.main.size];\n    scrollSize.cross = scrollSize[axis.cross.size];\n\n    /* When positioning self on the cross-axis do not exceed frame bounds. The strategy to achieve\n    this is thus: First position cross-axis self to the cross-axis-center of the the target. Then,\n    offset self by the amount that self is past the boundaries of frame. */\n    const pos = Layout.calcRelPos(zone, tb, this.size);\n\n    /* Offset allows users to control the distance betweent the tip and the target. */\n    pos[axis.main.start] += this.props.offset * zone.order;\n\n    /* Constrain containerEl Position within frameEl. Try not to penetrate a visually-pleasing buffer from\n    frameEl. `frameBuffer` length is based on tipSize and its offset. */\n\n    const frameBuffer = this.props.tipSize + this.props.offset;\n    const hangingBufferLength =\n      dockingEdgeBufferLength * 2 + this.props.tipSize * 2 + frameBuffer;\n    const frameCrossStart = this.frameBounds[axis.cross.start];\n    const frameCrossEnd = this.frameBounds[axis.cross.end];\n    const frameCrossLength = this.frameBounds[axis.cross.size];\n    const frameCrossInnerLength = frameCrossLength - frameBuffer * 2;\n    const frameCrossInnerStart = frameCrossStart + frameBuffer;\n    const frameCrossInnerEnd = frameCrossEnd - frameBuffer;\n    const popoverCrossStart = pos[axis.cross.start];\n    const popoverCrossEnd = pos[axis.cross.end];\n\n    /* If the popover dose not fit into frameCrossLength then just position it to the `frameCrossStart`.\n    popoverCrossLength` will now be forced to overflow into the `Frame` */\n    if (pos.crossLength > frameCrossLength) {\n      log(\"popoverCrossLength does not fit frame.\");\n      pos[axis.cross.start] = 0;\n\n      /* If the `popoverCrossStart` is forced beyond some threshold of `targetCrossLength` then bound\n    it (`popoverCrossStart`). */\n    } else if (tb[axis.cross.end] < hangingBufferLength) {\n      log(\"popoverCrossStart cannot hang any further without losing target.\");\n      pos[axis.cross.start] = tb[axis.cross.end] - hangingBufferLength;\n\n      /* checking if the cross start of the target area is within the frame and it makes sense\n    to try fitting popover into the frame. */\n    } else if (tb[axis.cross.start] > frameCrossInnerEnd) {\n      log(\"popoverCrossStart cannot hang any further without losing target.\");\n      pos[axis.cross.start] = tb[axis.cross.start] - this.size[axis.cross.size];\n\n      /* If the `popoverCrossStart` does not fit within the inner frame (honouring buffers) then\n    just center the popover in the remaining `frameCrossLength`. */\n    } else if (pos.crossLength > frameCrossInnerLength) {\n      log(\"popoverCrossLength does not fit within buffered frame.\");\n      pos[axis.cross.start] = (frameCrossLength - pos.crossLength) / 2;\n    } else if (popoverCrossStart < frameCrossInnerStart) {\n      log(\"popoverCrossStart cannot reverse without exceeding frame.\");\n      pos[axis.cross.start] = frameCrossInnerStart;\n    } else if (popoverCrossEnd > frameCrossInnerEnd) {\n      log(\"popoverCrossEnd cannot travel without exceeding frame.\");\n      pos[axis.cross.start] =\n        pos[axis.cross.start] - (pos[axis.cross.end] - frameCrossInnerEnd);\n    }\n\n    /* So far the link position has been calculated relative to the target. To calculate the absolute\n    position we need to factor the `Frame``s scroll position */\n\n    pos[axis.cross.start] += scrollSize.cross;\n    pos[axis.main.start] += scrollSize.main;\n\n    /* Apply `flow` and `order` styles. This can impact subsequent measurements of height and width\n    of the container. When tip changes orientation position due to changes from/to `row`/`column`\n    width`/`height` will be impacted. Our layout monitoring will catch these cases and automatically\n    recalculate layout. */\n    if (this.containerEl) {\n      this.containerEl.style.flexFlow = zone.flow;\n      this.containerEl.style[\n        jsprefix(\"FlexFlow\")\n      ] = this.containerEl.style.flexFlow;\n    }\n    this.bodyEl.style.order = zone.order;\n    this.bodyEl.style[jsprefix(\"Order\")] = this.bodyEl.style.order;\n\n    /* Apply Absolute Positioning. */\n\n    log(\"pos\", pos);\n    if (this.containerEl) {\n      this.containerEl.style.top = `${pos.y}px`;\n      this.containerEl.style.left = `${pos.x}px`;\n    }\n\n    /* Calculate Tip Position */\n\n    let tipCrossPos =\n      /* Get the absolute tipCrossCenter. Tip is positioned relative to containerEl\n      but it aims at targetCenter which is positioned relative to frameEl... we\n      need to cancel the containerEl positioning so as to hit our intended position. */\n      Layout.centerOfBoundsFromBounds(zone.flow, \"cross\", tb, pos) +\n      /* centerOfBounds does not account for scroll so we need to manually add that\n      here. */\n      scrollSize.cross -\n      /* Center tip relative to self. We do not have to calcualte half-of-tip-size since tip-size\n      specifies the length from base to tip which is half of total length already. */\n      this.props.tipSize;\n\n    if (tipCrossPos < dockingEdgeBufferLength)\n      tipCrossPos = dockingEdgeBufferLength;\n    else if (\n      tipCrossPos >\n      pos.crossLength - dockingEdgeBufferLength - this.props.tipSize * 2\n    ) {\n      tipCrossPos =\n        pos.crossLength - dockingEdgeBufferLength - this.props.tipSize * 2;\n    }\n\n    this.tipEl.style.transform = `${\n      flowToTipTranslations[zone.flow]\n    }(${tipCrossPos}px)`;\n    this.tipEl.style[jsprefix(\"Transform\")] = this.tipEl.style.transform;\n  }\n  checkTargetReposition = () => {\n    if (this.measureTargetBounds()) this.resolvePopoverLayout();\n  };\n  measurePopoverSize() {\n    this.size = Layout.El.calcSize(this.containerEl);\n  }\n  measureTargetBounds() {\n    const newTargetBounds = Layout.El.calcBounds(this.targetEl);\n\n    if (\n      this.targetBounds &&\n      Layout.equalCoords(this.targetBounds, newTargetBounds)\n    ) {\n      return false;\n    }\n\n    this.targetBounds = newTargetBounds;\n    return true;\n  }\n  open() {\n    if (this.state.exiting) this.animateExitStop();\n    this.setState({ toggle: true, exited: false });\n  }\n  close() {\n    this.setState({ toggle: false });\n  }\n  enter() {\n    if (Platform.isServer) return;\n    log(\"enter!\");\n    this.trackPopover();\n    this.animateEnter();\n  }\n  exit() {\n    log(\"exit!\");\n    this.animateExit();\n    this.untrackPopover();\n  }\n  animateExitStop() {\n    clearTimeout(this.exitingAnimationTimer1);\n    clearTimeout(this.exitingAnimationTimer2);\n    this.setState({ exiting: false });\n  }\n  animateExit() {\n    this.setState({ exiting: true });\n    this.exitingAnimationTimer2 = setTimeout(() => {\n      setTimeout(() => {\n        if (this.containerEl) {\n          this.containerEl.style.transform = `${\n            flowToPopoverTranslations[this.zone.flow]\n          }(${this.zone.order * 50}px)`;\n          this.containerEl.style.opacity = \"0\";\n        }\n      }, 0);\n    }, 0);\n\n    this.exitingAnimationTimer1 = setTimeout(() => {\n      this.setState({ exited: true, exiting: false });\n    }, this.props.enterExitTransitionDurationMs);\n  }\n  animateEnter() {\n    /* Prepare `entering` style so that we can then animate it toward `entered`. */\n\n    this.containerEl.style.transform = `${\n      flowToPopoverTranslations[this.zone.flow]\n    }(${this.zone.order * 50}px)`;\n    this.containerEl.style[\n      jsprefix(\"Transform\")\n    ] = this.containerEl.style.transform;\n    this.containerEl.style.opacity = \"0\";\n\n    /* After initial layout apply transition animations. */\n    /* Hack: http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes */\n    this.containerEl.offsetHeight; // eslint-disable-line no-unused-expressions\n\n    /* If enterExitTransitionDurationMs is falsy, tip animation should be also disabled */\n    if (this.props.enterExitTransitionDurationMs) {\n      this.tipEl.style.transition = \"transform 150ms ease-in\";\n      this.tipEl.style[jsprefix(\"Transition\")] = `${cssprefix(\n        \"transform\"\n      )} 150ms ease-in`;\n    }\n    this.containerEl.style.transitionProperty = \"top, left, opacity, transform\";\n    this.containerEl.style.transitionDuration = `${\n      this.props.enterExitTransitionDurationMs\n    }ms`;\n    this.containerEl.style.transitionTimingFunction =\n      \"cubic-bezier(0.230, 1.000, 0.320, 1.000)\";\n    this.containerEl.style.opacity = \"1\";\n    this.containerEl.style.transform = \"translateY(0)\";\n    this.containerEl.style[\n      jsprefix(\"Transform\")\n    ] = this.containerEl.style.transform;\n  }\n  trackPopover() {\n    const minScrollRefreshIntervalMs = 200;\n    const minResizeRefreshIntervalMs = 200;\n\n    /* Get references to DOM elements. */\n\n    this.bodyEl = this.containerEl.querySelector(\".Popover-body\");\n    this.tipEl = this.containerEl.querySelector(\".Popover-tip\");\n\n    /* Note: frame is hardcoded to window now but we think it will\n    be a nice feature in the future to allow other frames to be used\n    such as local elements that further constrain the popover`s world. */\n\n    this.frameEl = Platform.window;\n    this.hasTracked = true;\n\n    /* Set a general interval for checking if target position changed. There is no way\n    to know this information without polling. */\n    if (this.props.refreshIntervalMs) {\n      this.checkLayoutInterval = setInterval(\n        this.checkTargetReposition,\n        this.props.refreshIntervalMs\n      );\n    }\n\n    /* Watch for boundary changes in all deps, and when one of them changes, recalculate layout.\n    This layout monitoring must be bound immediately because a layout recalculation can recursively\n    cause a change in boundaries. So if we did a one-time force-layout before watching boundaries\n    our final position calculations could be wrong. See comments in resolver function for details\n    about which parts can trigger recursive recalculation. */\n\n    this.onFrameScroll = throttle(\n      this.onFrameScroll,\n      minScrollRefreshIntervalMs\n    );\n    this.onFrameResize = throttle(\n      this.onFrameResize,\n      minResizeRefreshIntervalMs\n    );\n    this.onPopoverResize = throttle(\n      this.onPopoverResize,\n      minResizeRefreshIntervalMs\n    );\n    this.onTargetResize = throttle(\n      this.onTargetResize,\n      minResizeRefreshIntervalMs\n    );\n\n    this.frameEl.addEventListener(\"scroll\", this.onFrameScroll);\n    resizeEvent.on(this.frameEl, this.onFrameResize);\n    resizeEvent.on(this.containerEl, this.onPopoverResize);\n    resizeEvent.on(this.targetEl, this.onTargetResize);\n\n    /* Track user actions on the page. Anything that occurs _outside_ the Popover boundaries\n    should close the Popover. */\n\n    Platform.document.addEventListener(\"mousedown\", this.checkForOuterAction);\n    Platform.document.addEventListener(\"touchstart\", this.checkForOuterAction);\n\n    /* Kickstart layout at first boot. */\n\n    this.measurePopoverSize();\n    this.measureFrameBounds();\n    this.measureTargetBounds();\n    this.resolvePopoverLayout();\n  }\n  checkForOuterAction = event => {\n    const isOuterAction =\n      !this.containerEl.contains(event.target) &&\n      !this.targetEl.contains(event.target);\n    if (isOuterAction) this.props.onOuterAction(event);\n  };\n  untrackPopover() {\n    clearInterval(this.checkLayoutInterval);\n    this.frameEl.removeEventListener(\"scroll\", this.onFrameScroll);\n    resizeEvent.off(this.frameEl, this.onFrameResize);\n    resizeEvent.off(this.containerEl, this.onPopoverResize);\n    resizeEvent.off(this.targetEl, this.onTargetResize);\n    Platform.document.removeEventListener(\n      \"mousedown\",\n      this.checkForOuterAction\n    );\n    Platform.document.removeEventListener(\n      \"touchstart\",\n      this.checkForOuterAction\n    );\n    this.hasTracked = false;\n  }\n  onTargetResize = () => {\n    log(\"Recalculating layout because _target_ resized!\");\n    this.measureTargetBounds();\n    this.resolvePopoverLayout();\n  };\n  onPopoverResize = () => {\n    log(\"Recalculating layout because _popover_ resized!\");\n    this.measurePopoverSize();\n    this.resolvePopoverLayout();\n  };\n  onFrameScroll = () => {\n    log(\"Recalculating layout because _frame_ scrolled!\");\n    this.measureTargetBounds();\n    this.resolvePopoverLayout();\n  };\n  onFrameResize = () => {\n    log(\"Recalculating layout because _frame_ resized!\");\n    this.measureFrameBounds();\n    this.resolvePopoverLayout();\n  };\n  measureFrameBounds() {\n    this.frameBounds = Layout.El.calcBounds(this.frameEl);\n  }\n  getContainerNodeRef = containerEl => {\n    Object.assign(this, { containerEl });\n  };\n  render() {\n    const { className = \"\", style = {}, tipSize, width = 320 } = this.props;\n    const { standing } = this.state;\n\n    const popoverProps = {\n      className: `Popover Popover-${standing} ${className}`,\n      style: { ...coreStyle, ...style }\n    };\n\n    const popover = this.state.exited ? null : (\n      <div ref={this.getContainerNodeRef} {...popoverProps}>\n        <div\n          className=\"Popover-body\"\n          children={this.props.body}\n          style={{\n            background: \"#fff\",\n            borderRadius: 3,\n            boxShadow: \"0 1px 2px rgba(0,0,0,.25), 0 0 1px rgba(0,0,0,.35)\",\n            position: \"relative\",\n            top: -8,\n            width\n          }}\n        />\n        <Tip direction={faces[standing]} size={tipSize} />\n      </div>\n    );\n    return [\n      this.props.children,\n      Platform.isClient &&\n        ReactDOM.createPortal(popover, this.props.appendTarget)\n    ];\n  }\n}\n\nexport default Popover;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AACA;AAIA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAgNA;AACA;AACA;AAlNA;AA+WA;AAGA;AACA;AACA;AApXA;AAqYA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAzYA;AA0YA;AACA;AAAA;AACA;AAAA;AACA;AACA;AA9YA;AA+YA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAnZA;AAoZA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAxZA;AA4ZA;AAAA;AAAA;AACA;AACA;AA5ZA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AALA;AAFA;AAQA;AACA;;;AAAA;AACA;;;;;;;AAOA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AACA;AACA;;AAEA;AACA;;;;AAGA;AACA;;;AACA;AACA;;AAGA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;AAaA;AAEA;AAMA;AAGA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;AAGA;AAEA;AACA;AAAA;AAEA;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;AAGA;AACA;AAEA;;;;;AAIA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AAEA;AAMA;AAEA;AAEA;AAGA;AACA;;;AAIA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AACA;AACA;AAEA;AAGA;AAGA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AAGA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAEA;;;AAEA;AACA;AAIA;AAEA;;;;;;;AAMA;AAIA;AAIA;AAIA;AAKA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;;;AAqBA;AACA;AACA;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAYA;AAAA;AAAA;AAGA;AAKA;;;;AAzdA;AACA;AADA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AA2cA;;;;A","sourceRoot":""}