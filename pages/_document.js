import Document, { Head, Main, NextScript } from "next/document";
import { ServerStyleSheet } from "styled-components";
import {
  AmpScripts,
  AmpScriptsManager,
  headerBoilerplate
} from "react-amphtml/setup";
import * as Amp from "react-amphtml";

import Nav from "../components/Nav";
import Footer from "../components/Footer";

export default class MyDocument extends Document {
  static async getInitialProps(ctx) {
    const { req, res, renderPage } = ctx;

    const noAmp =
      req.url.indexOf("/admin") !== -1 ||
      req.url === "/" ||
      req.url.indexOf("/?") !== -1 ||
      req.url.indexOf("/contact") !== -1 ||
      req.url.indexOf("/confessions") !== -1 ||
      req.url.indexOf("/contradictions-in-the-bible") !== -1;

    if (noAmp) {
      const initialProps = await Document.getInitialProps(ctx);
      return { ...initialProps, noAmp: true, url: req.url };
    }

    const ampScripts = new AmpScripts();
    const sheet = new ServerStyleSheet();

    const page = renderPage(App => props =>
      sheet.collectStyles(
        <AmpScriptsManager ampScripts={ampScripts}>
          <App {...props} />
        </AmpScriptsManager>
      )
    );

    const ampScriptTags = ampScripts.getScriptElements();

    // AMP only allows for 1 style tag, so we need to compbine all the style
    // tags generated by styled-components
    /* eslint-disable react/no-danger */
    const ampStyleTag = (
      <style
        amp-custom=""
        dangerouslySetInnerHTML={{
          __html: sheet
            .getStyleElement()
            .reduce(
              (
                css,
                {
                  props: { dangerouslySetInnerHTML: { __html = "" } = {} } = {}
                } = {}
              ) => `${css}${__html}`,
              ""
            )
        }}
      />
    );
    /* eslint-enable */

    // Get the dynamic `<title />` from the head generated by next.js
    const title = page.head
      .filter(({ type }) => {
        return type === "title";
      })
      .slice(0, 1) || (
      <title>
        Bible Answers: Explaining and Defending the Christian Worldview
      </title>
    );

    const descriptionAndImage =
      page.head
        .filter(({ type }) => {
          return type === "meta";
        })
        .slice(1) || null;

    const schemaInfo =
      page.head.filter(({ type }) => {
        return type === "script";
      }) || null;

    return {
      ...page,
      title,
      descriptionAndImage,
      schemaInfo,
      url: req.url,
      ampScriptTags,
      ampStyleTag
    };
  }

  renderWebsiteScript() {
    return (
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify({
            "@context": "http://schema.org",
            "@type": "WebSite",
            url: "https://bibleanswers.io/",
            potentialAction: {
              "@type": "SearchAction",
              target: "https://bibleanswers.io/search?q={search_term_string}",
              "query-input": "required name=search_term_string"
            }
          })
        }}
      />
    );
  }

  render() {
    if (this.props.noAmp) {
      return (
        <html>
          <Head>
            <link rel="icon" href="https://i.imgur.com/lnlvtFf.png" />
            <meta
              name="viewport"
              content="width=device-width,minimum-scale=1,initial-scale=1"
            />
            <link
              rel="canonical"
              href={`https://bibleanswers.io${this.props.url}`}
            />

            {this.props.url === "/" ? this.renderWebsiteScript() : null}
            <style>{`body { margin: 0 } /* custom! */`}</style>

            <script
              async
              src="https://www.googletagmanager.com/gtag/js?id=UA-125895534-1"
            />
            <script
              dangerouslySetInnerHTML={{
                __html: `window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-125895534-1');`
              }}
            />
          </Head>
          <body className="custom_class">
            <Nav />
            <Main />
            <NextScript />
            <Footer />
          </body>
        </html>
      );
    }

    const {
      title,
      descriptionAndImage,
      schemaInfo,
      url,
      ampScriptTags,
      ampStyleTag,
      html
    } = this.props;

    /* eslint-disable react/no-danger */
    return (
      <Amp.Html specName="html âš¡ for top-level html" lang="en" amp="amp">
        <head>
          <link rel="icon" href="https://i.imgur.com/lnlvtFf.png" />
          {title}
          {descriptionAndImage}
          {schemaInfo}
          {headerBoilerplate(`https://bibleanswers.io${url}`)}
          {ampScriptTags}
          {ampStyleTag}

          <script
            async
            custom-element="amp-analytics"
            src="https://cdn.ampproject.org/v0/amp-analytics-0.1.js"
          />
        </head>
        <body>
          <amp-analytics type="gtag" data-credentials="include">
            <script
              type="application/json"
              dangerouslySetInnerHTML={{
                __html: JSON.stringify({
                  vars: {
                    gtag_id: "UA-125895534-1",
                    config: {
                      "UA-125895534-1": { groups: "default" }
                    }
                  }
                })
              }}
            />
          </amp-analytics>

          <Nav isAmp />
          <div dangerouslySetInnerHTML={{ __html: html }} />
          <Footer isAmp />
        </body>
      </Amp.Html>
    );
  }
}
