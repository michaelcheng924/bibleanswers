import Document from "next/document";
import { ServerStyleSheet } from "styled-components";
import {
  AmpScripts,
  AmpScriptsManager,
  headerBoilerplate
} from "react-amphtml/setup";
import * as Amp from "react-amphtml";

import SITEMAP from "../constants/sitemap";
import Nav from "../components/Nav";

export default class MyDocument extends Document {
  static getInitialProps({ req, res, renderPage }) {
    if (req.url === "/sitemap.xml") {
      res.set("Content-Type", "text/xml");
      res.send(SITEMAP);
    }

    const ampScripts = new AmpScripts();
    const sheet = new ServerStyleSheet();

    const page = renderPage(App => props =>
      sheet.collectStyles(
        <AmpScriptsManager ampScripts={ampScripts}>
          <App {...props} />
        </AmpScriptsManager>
      )
    );

    const ampScriptTags = ampScripts.getScriptElements();

    // AMP only allows for 1 style tag, so we need to compbine all the style
    // tags generated by styled-components
    /* eslint-disable react/no-danger */
    const ampStyleTag = (
      <style
        amp-custom=""
        dangerouslySetInnerHTML={{
          __html: sheet
            .getStyleElement()
            .reduce(
              (
                css,
                {
                  props: { dangerouslySetInnerHTML: { __html = "" } = {} } = {}
                } = {}
              ) => `${css}${__html}`,
              ""
            )
        }}
      />
    );
    /* eslint-enable */

    // Get the dynamic `<title />` from the head generated by next.js
    const title = page.head
      .filter(({ type }) => type === "title")
      .slice(0, 1) || <title>ampreact</title>;

    const metaDescription =
      page.head.filter(({ type }) => type === "meta").slice(1, 2) || null;

    const schemaInfo =
      page.head
        .filter(({ type }) => {
          return type === "script";
        })
        .slice(0, 1) || null;

    return {
      ...page,
      title,
      metaDescription,
      schemaInfo,
      url: req.url,
      ampScriptTags,
      ampStyleTag
    };
  }

  render() {
    const {
      title,
      metaDescription,
      schemaInfo,
      url,
      ampScriptTags,
      ampStyleTag,
      html
    } = this.props;

    /* eslint-disable react/no-danger */
    return (
      <Amp.Html specName="html âš¡ for top-level html" lang="en" amp="amp">
        <head>
          <link rel="icon" href="https://i.imgur.com/lnlvtFf.png" />
          {title}
          {metaDescription}
          {schemaInfo}
          {headerBoilerplate(url)}
          {ampScriptTags}
          {ampStyleTag}
        </head>
        <body>
          <Nav isAmp />
          <div dangerouslySetInnerHTML={{ __html: html }} />
        </body>
      </Amp.Html>
    );
  }
}
