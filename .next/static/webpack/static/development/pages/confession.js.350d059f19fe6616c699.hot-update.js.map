{"version":3,"file":"static/webpack/static/development/pages/confession.js.350d059f19fe6616c699.hot-update.js","sources":["webpack:///./components/ConfessionParagraph.js","webpack:///./node_modules/classnames/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport css from \"classnames\";\n\nconst ConfessionParagraph = ({ paragraph, index }) => {\n  const [activeScripture, setActiveScripture] = useState(null);\n\n  return (\n    <div>\n      <h4>Chapter {index + 1}</h4>\n      <p>\n        {paragraph.map(section => {\n          return (\n            <span key={section.superscript}>\n              {section.text}\n              <a\n                href={`#ref-${index}-${section.superscript}`}\n                id={`${index}-${section.superscript}`}\n                className=\"superscript\"\n              >{`${section.superscript} `}</a>\n            </span>\n          );\n        })}\n      </p>\n\n      <div className=\"scripture-section\">\n        <p className=\"nomargin\">\n          <strong>References (click to view)</strong>\n        </p>\n        {paragraph.map(section => {\n          return (\n            <p key={section.superscript} className=\"nomargin\">\n              <a\n                href={`#${index}-${section.superscript}`}\n                id={`ref-${index}-${section.superscript}`}\n              >\n                {`^ `}\n              </a>\n              <strong>{section.superscript}.</strong>{\" \"}\n              {section.scriptures.map(scripture => {\n                return (\n                  <span\n                    key={scripture}\n                    className=\"scripture\"\n                    onClick={() => setActiveScripture()}\n                  >\n                    {scripture}\n                  </span>\n                );\n              })}\n            </p>\n          );\n        })}\n\n        <p className=\"first\">\n          <em>Click on a Scripture above to view passage</em>\n        </p>\n      </div>\n\n      <style jsx>{`\n        p {\n          font-size: 21px;\n          line-height: 1.58;\n          margin: 0;\n          margin-top: 29px;\n        }\n\n        .first {\n          margin-top: 8px;\n        }\n\n        .nomargin {\n          margin-top: 0;\n        }\n\n        a {\n          color: #689f38;\n          text-decoration: none;\n        }\n\n        @media screen and (max-width: 768px) {\n          p {\n            font-size: 18px;\n            margin-top: 21px;\n          }\n        }\n\n        .superscript {\n          color: #689f38;\n          font-size: 15px;\n          margin-left: 1px;\n          position: relative;\n          top: -6px;\n        }\n\n        .scripture-section {\n          border: 1px solid #bdbdbd;\n          margin-top: 20px;\n          padding: 5px 10px;\n        }\n\n        .scripture {\n          color: #bdbdbd;\n          cursor: pointer;\n          margin-right: 5px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default ConfessionParagraph;\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAOA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAMA;AAAA;AAEA;AAEA;AAEA;AAAA;AAAA;AAHA;AAAA;AAQA;AAGA;AAEA;AAAA;AACA;AAAA;AA/CA;AAAA;AAAA;AAqGA;AACA;AACA;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA,UAEA;AACA;;;;;A","sourceRoot":""}